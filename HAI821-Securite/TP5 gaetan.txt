Require Import Arith.
Require Import Omega.
Require Export List.
Open Scope list_scope.
Import ListNotations.

(*EXERCICE 1*)
(*QUESTION 1*)
Inductive is_perm : list nat -> list nat -> Prop :=
|is_perm_cons : forall (a : nat) (l0 l1 : list nat),
  is_perm l0 l1 -> is_perm (a :: l0) (a :: l1)
|is_perm_append : forall (a : nat) (l : list nat),
  is_perm (a :: l) (l ++ a :: nil)
|is_perm_refl : forall l : list nat, is_perm l l
|is_perm_trans : forall l0 l1 l2 : list nat,
  is_perm l0 l1 -> is_perm l1 l2 -> is_perm l0 l2
|is_perm_sym : forall l1 l2 : list nat,
  is_perm l1 l2 -> is_perm l2 l1.

(*QUESTION 2*)
Lemma is_perm_1 : (is_perm [1; 2; 3] [3; 2; 1]).
Proof.
apply (is_perm_trans [1; 2; 3] ([2; 3] ++ [1]) [3; 2; 1]).
apply is_perm_append.
simpl.
apply (is_perm_trans [2; 3; 1] ([3] ++ [1; 2]) [3; 2; 1]).
simpl.
apply is_perm_append.
simpl.
apply is_perm_cons.
apply (is_perm_trans [1; 2] ([2] ++ [1]) [2; 1]).
apply is_perm_append.
simpl.
apply is_perm_refl.
Qed.


(*QUESTION 3*)
Inductive is_sorted : list nat -> Prop :=
|is_sorted_nil : is_sorted nil
|is_sorted_sing : forall n : nat, is_sorted (n::nil)
|is_sorted_cons : forall (n m : nat) (l : list nat), n <= m -> is_sorted (m::l) -> is_sorted (n::m::l).

(*QUESTION 4*)
Lemma is_sorted_l : (is_sorted [1; 2; 3]).
Proof.
apply is_sorted_cons.
auto.
apply is_sorted_cons.
auto.
apply is_sorted_sing.
Qed.

(*EXERCICE 2*)
Definition le_10 (n : nat) : bool :=
  match (le_dec n 10) with
  | left _ => true
  | right _ => false
  end.

Eval compute in le_10 5.
Eval compute in le_10 15.

(*QUESTION 2*)
Fixpoint insert (x : nat) (l : list nat) {struct l} : list nat :=
  match l with
  | nil => x::nil
  | n::t =>
        match le_dec x n with
        | left _ => x::n::t
        | right _ => n::(insert x t)
        end
  end.

(*QUESTION 3*)
Eval compute in insert 3 [1; 2; 4; 5].

(*QUESTION 4*)
Fixpoint isort (l : list nat) : list nat :=
  match l with
  | nil => nil
  | n::t => insert n (isort t)
  end.

(*QUESTION 5*)
Eval compute in isort [5;4;3;2;1].

(*EXERCICE 3*)
(*QUESTION 1*)

Lemma head_is_perm : forall (x1 x2 : nat) (l : list nat),
  is_perm (x1 :: x2 :: l) (x2 :: x1 :: l).
Proof.
  intros.
  apply is_perm_trans with (x2::l ++ x1::nil).
  apply is_perm_append.
  apply is_perm_cons.
  apply is_perm_sym.
  apply is_perm_append.
Qed.


(*QUESTION 2*)
Lemma insert_is_perm : forall (x : nat) (l : list nat),
  is_perm (x::l) (insert x l).
Proof.
  intros.
  induction l.
  simpl.
  apply is_perm_append.
  simpl.
  elim (le_dec x a).
  intros.
  apply is_perm_refl.
  intros.
  apply (is_perm_trans (x :: a :: l) (a :: x :: l) (a :: insert x l)).
  apply head_is_perm.
  apply is_perm_cons.
  assumption.
Qed.

(*QUESTION 3*)
Lemma insert_is_sorted : forall (x : nat) (l : list nat),
  is_sorted l -> is_sorted (insert x l).
Proof.
  intros.
  elim H.
  simpl.
  apply is_sorted_sing.
  intros.
  simpl.
  elim (le_dec x n).
  intros.
  apply is_sorted_cons.
  assumption.
  apply is_sorted_sing.
  intros.
  apply is_sorted_cons.
  omega.
  apply is_sorted_sing.
  simpl.
  intro.
  intro.
  elim (le_dec x m).
  intros.
  elim (le_dec x n).
  intros.
  apply is_sorted_cons.
  assumption.
  apply is_sorted_cons.
  omega.
  apply H1.
  intros.
  apply is_sorted_cons.
  omega.
  apply is_sorted_cons.
  omega.
  apply H1.
  intros.
  elim (le_dec x n).
  intros.
  apply is_sorted_cons.
  omega.
  apply is_sorted_cons.
  omega.
  apply H1.
  intros.
  apply is_sorted_cons.
  omega.
  apply H2.
Qed.




(*QUESTION 4*)
Lemma isort_correct : forall (l l' : list nat),
  l' = isort l -> is_perm l l' /\ is_sorted l'.
Proof.
  induction l.
  intros.
  split.
  rewrite H.
  simpl.
  apply is_perm_refl.
  rewrite H.
  simpl.
  apply is_sorted_nil.
  elim (IHl (isort l)).
  intros.
  split.
  rewrite H1.
  simpl.
  apply (is_perm_trans (a::l) (a::(isort l)) (insert a (isort l))).
  apply is_perm_cons.
  assumption.
  apply insert_is_perm.
  rewrite H1.
  simpl.
  apply insert_is_sorted.
  assumption.
  reflexivity.
Qed.
  
  
