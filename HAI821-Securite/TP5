Require Import Arith.
Require Import Omega.
Require Export List.
Open Scope list_scope.
Import ListNotations.

 (* Penser a rÃ©cup correction * )

(* Exercice 1 *)

Inductive is_rev : list nat -> list nat -> Prop :=
  | is_rev_nil : is_rev nil nil
  | is_rev_cons : forall ( n : nat ) ( l1 l2 v : list nat ) ,
  is_rev l1 l2 -> v = l2++[n] -> is_rev ( n::l1 ) v
  | is_rev_sym : forall ( l1 l2 : list nat ) , is_rev l1 l2 ->
  is_rev l2 l1 .


Lemma q1 : (is_rev [1;2;3] [3;2;1]).
Proof.


Qed.